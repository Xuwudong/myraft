// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package raft

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type Role int64
const (
  Role_Leader Role = 1
  Role_Follower Role = 2
  Role_Candidater Role = 3
)

func (p Role) String() string {
  switch p {
  case Role_Leader: return "Leader"
  case Role_Follower: return "Follower"
  case Role_Candidater: return "Candidater"
  }
  return "<UNSET>"
}

func RoleFromString(s string) (Role, error) {
  switch s {
  case "Leader": return Role_Leader, nil 
  case "Follower": return Role_Follower, nil 
  case "Candidater": return Role_Candidater, nil 
  }
  return Role(0), fmt.Errorf("not a valid Role string")
}


func RolePtr(v Role) *Role { return &v }

func (p Role) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Role) UnmarshalText(text []byte) error {
q, err := RoleFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Role) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Role(v)
return nil
}

func (p * Role) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Opt int64
const (
  Opt_Read Opt = 1
  Opt_Write Opt = 2
)

func (p Opt) String() string {
  switch p {
  case Opt_Read: return "Read"
  case Opt_Write: return "Write"
  }
  return "<UNSET>"
}

func OptFromString(s string) (Opt, error) {
  switch s {
  case "Read": return Opt_Read, nil 
  case "Write": return Opt_Write, nil 
  }
  return Opt(0), fmt.Errorf("not a valid Opt string")
}


func OptPtr(v Opt) *Opt { return &v }

func (p Opt) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Opt) UnmarshalText(text []byte) error {
q, err := OptFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Opt) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Opt(v)
return nil
}

func (p * Opt) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EntryType int64
const (
  EntryType_KV EntryType = 1
  EntryType_MemberChange EntryType = 2
  EntryType_MemberChangeNew EntryType = 3
)

func (p EntryType) String() string {
  switch p {
  case EntryType_KV: return "KV"
  case EntryType_MemberChange: return "MemberChange"
  case EntryType_MemberChangeNew: return "MemberChangeNew"
  }
  return "<UNSET>"
}

func EntryTypeFromString(s string) (EntryType, error) {
  switch s {
  case "KV": return EntryType_KV, nil 
  case "MemberChange": return EntryType_MemberChange, nil 
  case "MemberChangeNew": return EntryType_MemberChangeNew, nil 
  }
  return EntryType(0), fmt.Errorf("not a valid EntryType string")
}


func EntryTypePtr(v EntryType) *EntryType { return &v }

func (p EntryType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EntryType) UnmarshalText(text []byte) error {
q, err := EntryTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EntryType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EntryType(v)
return nil
}

func (p * EntryType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Term
//  - Entry
type LogEntry struct {
  Term int64 `thrift:"term,1" db:"term" json:"term"`
  Entry *Entry `thrift:"entry,2" db:"entry" json:"entry"`
}

func NewLogEntry() *LogEntry {
  return &LogEntry{}
}


func (p *LogEntry) GetTerm() int64 {
  return p.Term
}
var LogEntry_Entry_DEFAULT *Entry
func (p *LogEntry) GetEntry() *Entry {
  if !p.IsSetEntry() {
    return LogEntry_Entry_DEFAULT
  }
return p.Entry
}
func (p *LogEntry) IsSetEntry() bool {
  return p.Entry != nil
}

func (p *LogEntry) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LogEntry)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Term = v
}
  return nil
}

func (p *LogEntry)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Entry = &Entry{}
  if err := p.Entry.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Entry), err)
  }
  return nil
}

func (p *LogEntry) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "LogEntry"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LogEntry) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "term", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term: ", p), err) }
  return err
}

func (p *LogEntry) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "entry", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:entry: ", p), err) }
  if err := p.Entry.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Entry), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:entry: ", p), err) }
  return err
}

func (p *LogEntry) Equals(other *LogEntry) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Term != other.Term { return false }
  if !p.Entry.Equals(other.Entry) { return false }
  return true
}

func (p *LogEntry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LogEntry(%+v)", *p)
}

// Attributes:
//  - Entry
//  - Opt
type Command struct {
  Entry *Entry `thrift:"entry,1" db:"entry" json:"entry"`
  // unused field # 2
  Opt Opt `thrift:"opt,3" db:"opt" json:"opt"`
}

func NewCommand() *Command {
  return &Command{}
}

var Command_Entry_DEFAULT *Entry
func (p *Command) GetEntry() *Entry {
  if !p.IsSetEntry() {
    return Command_Entry_DEFAULT
  }
return p.Entry
}

func (p *Command) GetOpt() Opt {
  return p.Opt
}
func (p *Command) IsSetEntry() bool {
  return p.Entry != nil
}

func (p *Command) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Command)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Entry = &Entry{}
  if err := p.Entry.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Entry), err)
  }
  return nil
}

func (p *Command)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Opt(v)
  p.Opt = temp
}
  return nil
}

func (p *Command) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Command"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Command) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "entry", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:entry: ", p), err) }
  if err := p.Entry.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Entry), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:entry: ", p), err) }
  return err
}

func (p *Command) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "opt", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:opt: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Opt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.opt (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:opt: ", p), err) }
  return err
}

func (p *Command) Equals(other *Command) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Entry.Equals(other.Entry) { return false }
  if p.Opt != other.Opt { return false }
  return true
}

func (p *Command) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Command(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
//  - EntryType
//  - Members
type Entry struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
  Value int64 `thrift:"value,2" db:"value" json:"value"`
  EntryType EntryType `thrift:"entry_type,3" db:"entry_type" json:"entry_type"`
  Members []*Member `thrift:"members,4" db:"members" json:"members"`
}

func NewEntry() *Entry {
  return &Entry{}
}


func (p *Entry) GetKey() string {
  return p.Key
}

func (p *Entry) GetValue() int64 {
  return p.Value
}

func (p *Entry) GetEntryType() EntryType {
  return p.EntryType
}

func (p *Entry) GetMembers() []*Member {
  return p.Members
}
func (p *Entry) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Entry)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *Entry)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *Entry)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := EntryType(v)
  p.EntryType = temp
}
  return nil
}

func (p *Entry)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Member, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &Member{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Members = append(p.Members, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Entry) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Entry"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Entry) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *Entry) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *Entry) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "entry_type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entry_type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.EntryType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.entry_type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entry_type: ", p), err) }
  return err
}

func (p *Entry) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "members", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:members: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Members)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Members {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:members: ", p), err) }
  return err
}

func (p *Entry) Equals(other *Entry) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Key != other.Key { return false }
  if p.Value != other.Value { return false }
  if p.EntryType != other.EntryType { return false }
  if len(p.Members) != len(other.Members) { return false }
  for i, _tgt := range p.Members {
    _src1 := other.Members[i]
    if !_tgt.Equals(_src1) { return false }
  }
  return true
}

func (p *Entry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Entry(%+v)", *p)
}

// Attributes:
//  - MemberID
//  - ServerAddr
//  - ClientAddr
type Member struct {
  MemberID int64 `thrift:"member_id,1" db:"member_id" json:"member_id"`
  ServerAddr string `thrift:"server_addr,2" db:"server_addr" json:"server_addr"`
  ClientAddr string `thrift:"client_addr,3" db:"client_addr" json:"client_addr"`
}

func NewMember() *Member {
  return &Member{}
}


func (p *Member) GetMemberID() int64 {
  return p.MemberID
}

func (p *Member) GetServerAddr() string {
  return p.ServerAddr
}

func (p *Member) GetClientAddr() string {
  return p.ClientAddr
}
func (p *Member) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Member)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MemberID = v
}
  return nil
}

func (p *Member)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ServerAddr = v
}
  return nil
}

func (p *Member)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ClientAddr = v
}
  return nil
}

func (p *Member) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Member"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Member) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "member_id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:member_id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.MemberID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.member_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:member_id: ", p), err) }
  return err
}

func (p *Member) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "server_addr", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:server_addr: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ServerAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.server_addr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:server_addr: ", p), err) }
  return err
}

func (p *Member) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "client_addr", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:client_addr: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ClientAddr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.client_addr (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:client_addr: ", p), err) }
  return err
}

func (p *Member) Equals(other *Member) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.MemberID != other.MemberID { return false }
  if p.ServerAddr != other.ServerAddr { return false }
  if p.ClientAddr != other.ClientAddr { return false }
  return true
}

func (p *Member) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Member(%+v)", *p)
}

