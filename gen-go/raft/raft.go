// Code generated by Thrift Compiler (0.16.0). DO NOT EDIT.

package raft

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//  - Term
//  - LeaderId
//  - PreLogIndex
//  - PreLogTerm
//  - Entries
//  - LeaderCommit
type AppendEntriesReq struct {
  Term int64 `thrift:"term,1" db:"term" json:"term"`
  LeaderId int64 `thrift:"leaderId,2" db:"leaderId" json:"leaderId"`
  PreLogIndex int64 `thrift:"preLogIndex,3" db:"preLogIndex" json:"preLogIndex"`
  PreLogTerm int64 `thrift:"preLogTerm,4" db:"preLogTerm" json:"preLogTerm"`
  Entries []*LogEntry `thrift:"entries,5" db:"entries" json:"entries"`
  LeaderCommit int64 `thrift:"leaderCommit,6" db:"leaderCommit" json:"leaderCommit"`
}

func NewAppendEntriesReq() *AppendEntriesReq {
  return &AppendEntriesReq{}
}


func (p *AppendEntriesReq) GetTerm() int64 {
  return p.Term
}

func (p *AppendEntriesReq) GetLeaderId() int64 {
  return p.LeaderId
}

func (p *AppendEntriesReq) GetPreLogIndex() int64 {
  return p.PreLogIndex
}

func (p *AppendEntriesReq) GetPreLogTerm() int64 {
  return p.PreLogTerm
}

func (p *AppendEntriesReq) GetEntries() []*LogEntry {
  return p.Entries
}

func (p *AppendEntriesReq) GetLeaderCommit() int64 {
  return p.LeaderCommit
}
func (p *AppendEntriesReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AppendEntriesReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Term = v
}
  return nil
}

func (p *AppendEntriesReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LeaderId = v
}
  return nil
}

func (p *AppendEntriesReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PreLogIndex = v
}
  return nil
}

func (p *AppendEntriesReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PreLogTerm = v
}
  return nil
}

func (p *AppendEntriesReq)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*LogEntry, 0, size)
  p.Entries =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &LogEntry{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Entries = append(p.Entries, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AppendEntriesReq)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LeaderCommit = v
}
  return nil
}

func (p *AppendEntriesReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AppendEntriesReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AppendEntriesReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "term", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term: ", p), err) }
  return err
}

func (p *AppendEntriesReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leaderId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leaderId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LeaderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leaderId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leaderId: ", p), err) }
  return err
}

func (p *AppendEntriesReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "preLogIndex", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:preLogIndex: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.PreLogIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preLogIndex (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:preLogIndex: ", p), err) }
  return err
}

func (p *AppendEntriesReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "preLogTerm", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:preLogTerm: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.PreLogTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preLogTerm (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:preLogTerm: ", p), err) }
  return err
}

func (p *AppendEntriesReq) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "entries", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:entries: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Entries)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Entries {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:entries: ", p), err) }
  return err
}

func (p *AppendEntriesReq) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "leaderCommit", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:leaderCommit: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LeaderCommit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leaderCommit (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:leaderCommit: ", p), err) }
  return err
}

func (p *AppendEntriesReq) Equals(other *AppendEntriesReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Term != other.Term { return false }
  if p.LeaderId != other.LeaderId { return false }
  if p.PreLogIndex != other.PreLogIndex { return false }
  if p.PreLogTerm != other.PreLogTerm { return false }
  if len(p.Entries) != len(other.Entries) { return false }
  for i, _tgt := range p.Entries {
    _src1 := other.Entries[i]
    if !_tgt.Equals(_src1) { return false }
  }
  if p.LeaderCommit != other.LeaderCommit { return false }
  return true
}

func (p *AppendEntriesReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AppendEntriesReq(%+v)", *p)
}

// Attributes:
//  - Term
//  - Succuess
type AppendEntriesResp struct {
  Term int64 `thrift:"term,1" db:"term" json:"term"`
  Succuess bool `thrift:"succuess,2" db:"succuess" json:"succuess"`
}

func NewAppendEntriesResp() *AppendEntriesResp {
  return &AppendEntriesResp{}
}


func (p *AppendEntriesResp) GetTerm() int64 {
  return p.Term
}

func (p *AppendEntriesResp) GetSuccuess() bool {
  return p.Succuess
}
func (p *AppendEntriesResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AppendEntriesResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Term = v
}
  return nil
}

func (p *AppendEntriesResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Succuess = v
}
  return nil
}

func (p *AppendEntriesResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AppendEntriesResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AppendEntriesResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "term", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term: ", p), err) }
  return err
}

func (p *AppendEntriesResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "succuess", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:succuess: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Succuess)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.succuess (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:succuess: ", p), err) }
  return err
}

func (p *AppendEntriesResp) Equals(other *AppendEntriesResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Term != other.Term { return false }
  if p.Succuess != other.Succuess { return false }
  return true
}

func (p *AppendEntriesResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AppendEntriesResp(%+v)", *p)
}

// Attributes:
//  - Term
//  - CandidateId
//  - LastLogIndex
//  - LastLogTerm
type RequestVoteReq struct {
  Term int64 `thrift:"term,1" db:"term" json:"term"`
  CandidateId int64 `thrift:"candidateId,2" db:"candidateId" json:"candidateId"`
  LastLogIndex int64 `thrift:"lastLogIndex,3" db:"lastLogIndex" json:"lastLogIndex"`
  LastLogTerm int64 `thrift:"lastLogTerm,4" db:"lastLogTerm" json:"lastLogTerm"`
}

func NewRequestVoteReq() *RequestVoteReq {
  return &RequestVoteReq{}
}


func (p *RequestVoteReq) GetTerm() int64 {
  return p.Term
}

func (p *RequestVoteReq) GetCandidateId() int64 {
  return p.CandidateId
}

func (p *RequestVoteReq) GetLastLogIndex() int64 {
  return p.LastLogIndex
}

func (p *RequestVoteReq) GetLastLogTerm() int64 {
  return p.LastLogTerm
}
func (p *RequestVoteReq) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RequestVoteReq)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Term = v
}
  return nil
}

func (p *RequestVoteReq)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CandidateId = v
}
  return nil
}

func (p *RequestVoteReq)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastLogIndex = v
}
  return nil
}

func (p *RequestVoteReq)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LastLogTerm = v
}
  return nil
}

func (p *RequestVoteReq) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RequestVoteReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequestVoteReq) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "term", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term: ", p), err) }
  return err
}

func (p *RequestVoteReq) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "candidateId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:candidateId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CandidateId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.candidateId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:candidateId: ", p), err) }
  return err
}

func (p *RequestVoteReq) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastLogIndex", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastLogIndex: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastLogIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastLogIndex (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastLogIndex: ", p), err) }
  return err
}

func (p *RequestVoteReq) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastLogTerm", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lastLogTerm: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastLogTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastLogTerm (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lastLogTerm: ", p), err) }
  return err
}

func (p *RequestVoteReq) Equals(other *RequestVoteReq) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Term != other.Term { return false }
  if p.CandidateId != other.CandidateId { return false }
  if p.LastLogIndex != other.LastLogIndex { return false }
  if p.LastLogTerm != other.LastLogTerm { return false }
  return true
}

func (p *RequestVoteReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestVoteReq(%+v)", *p)
}

// Attributes:
//  - Term
//  - VoteGranted
type RequestVoteResp struct {
  Term int64 `thrift:"term,1" db:"term" json:"term"`
  VoteGranted bool `thrift:"voteGranted,2" db:"voteGranted" json:"voteGranted"`
}

func NewRequestVoteResp() *RequestVoteResp {
  return &RequestVoteResp{}
}


func (p *RequestVoteResp) GetTerm() int64 {
  return p.Term
}

func (p *RequestVoteResp) GetVoteGranted() bool {
  return p.VoteGranted
}
func (p *RequestVoteResp) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RequestVoteResp)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Term = v
}
  return nil
}

func (p *RequestVoteResp)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VoteGranted = v
}
  return nil
}

func (p *RequestVoteResp) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RequestVoteResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RequestVoteResp) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "term", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term: ", p), err) }
  return err
}

func (p *RequestVoteResp) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "voteGranted", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:voteGranted: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.VoteGranted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.voteGranted (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:voteGranted: ", p), err) }
  return err
}

func (p *RequestVoteResp) Equals(other *RequestVoteResp) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Term != other.Term { return false }
  if p.VoteGranted != other.VoteGranted { return false }
  return true
}

func (p *RequestVoteResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RequestVoteResp(%+v)", *p)
}

type RaftServer interface {
  // Parameters:
  //  - Req
  AppendEntries(ctx context.Context, req *AppendEntriesReq) (_r *AppendEntriesResp, _err error)
  // Parameters:
  //  - Req
  RequestVote(ctx context.Context, req *RequestVoteReq) (_r *RequestVoteResp, _err error)
}

type RaftServerClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewRaftServerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RaftServerClient {
  return &RaftServerClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewRaftServerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RaftServerClient {
  return &RaftServerClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewRaftServerClient(c thrift.TClient) *RaftServerClient {
  return &RaftServerClient{
    c: c,
  }
}

func (p *RaftServerClient) Client_() thrift.TClient {
  return p.c
}

func (p *RaftServerClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *RaftServerClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Req
func (p *RaftServerClient) AppendEntries(ctx context.Context, req *AppendEntriesReq) (_r *AppendEntriesResp, _err error) {
  var _args2 RaftServerAppendEntriesArgs
  _args2.Req = req
  var _result4 RaftServerAppendEntriesResult
  var _meta3 thrift.ResponseMeta
  _meta3, _err = p.Client_().Call(ctx, "AppendEntries", &_args2, &_result4)
  p.SetLastResponseMeta_(_meta3)
  if _err != nil {
    return
  }
  if _ret5 := _result4.GetSuccess(); _ret5 != nil {
    return _ret5, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "AppendEntries failed: unknown result")
}

// Parameters:
//  - Req
func (p *RaftServerClient) RequestVote(ctx context.Context, req *RequestVoteReq) (_r *RequestVoteResp, _err error) {
  var _args6 RaftServerRequestVoteArgs
  _args6.Req = req
  var _result8 RaftServerRequestVoteResult
  var _meta7 thrift.ResponseMeta
  _meta7, _err = p.Client_().Call(ctx, "RequestVote", &_args6, &_result8)
  p.SetLastResponseMeta_(_meta7)
  if _err != nil {
    return
  }
  if _ret9 := _result8.GetSuccess(); _ret9 != nil {
    return _ret9, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "RequestVote failed: unknown result")
}

type RaftServerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler RaftServer
}

func (p *RaftServerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RaftServerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RaftServerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRaftServerProcessor(handler RaftServer) *RaftServerProcessor {

  self10 := &RaftServerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self10.processorMap["AppendEntries"] = &raftServerProcessorAppendEntries{handler:handler}
  self10.processorMap["RequestVote"] = &raftServerProcessorRequestVote{handler:handler}
return self10
}

func (p *RaftServerProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x11.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x11

}

type raftServerProcessorAppendEntries struct {
  handler RaftServer
}

func (p *raftServerProcessorAppendEntries) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RaftServerAppendEntriesArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "AppendEntries", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RaftServerAppendEntriesResult{}
  var retval *AppendEntriesResp
  if retval, err2 = p.handler.AppendEntries(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AppendEntries: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "AppendEntries", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "AppendEntries", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type raftServerProcessorRequestVote struct {
  handler RaftServer
}

func (p *raftServerProcessorRequestVote) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RaftServerRequestVoteArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "RequestVote", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RaftServerRequestVoteResult{}
  var retval *RequestVoteResp
  if retval, err2 = p.handler.RequestVote(ctx, args.Req); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RequestVote: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "RequestVote", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "RequestVote", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type RaftServerAppendEntriesArgs struct {
  Req *AppendEntriesReq `thrift:"req,1" db:"req" json:"req"`
}

func NewRaftServerAppendEntriesArgs() *RaftServerAppendEntriesArgs {
  return &RaftServerAppendEntriesArgs{}
}

var RaftServerAppendEntriesArgs_Req_DEFAULT *AppendEntriesReq
func (p *RaftServerAppendEntriesArgs) GetReq() *AppendEntriesReq {
  if !p.IsSetReq() {
    return RaftServerAppendEntriesArgs_Req_DEFAULT
  }
return p.Req
}
func (p *RaftServerAppendEntriesArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *RaftServerAppendEntriesArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServerAppendEntriesArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &AppendEntriesReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *RaftServerAppendEntriesArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AppendEntries_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServerAppendEntriesArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *RaftServerAppendEntriesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServerAppendEntriesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RaftServerAppendEntriesResult struct {
  Success *AppendEntriesResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRaftServerAppendEntriesResult() *RaftServerAppendEntriesResult {
  return &RaftServerAppendEntriesResult{}
}

var RaftServerAppendEntriesResult_Success_DEFAULT *AppendEntriesResp
func (p *RaftServerAppendEntriesResult) GetSuccess() *AppendEntriesResp {
  if !p.IsSetSuccess() {
    return RaftServerAppendEntriesResult_Success_DEFAULT
  }
return p.Success
}
func (p *RaftServerAppendEntriesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RaftServerAppendEntriesResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServerAppendEntriesResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &AppendEntriesResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RaftServerAppendEntriesResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AppendEntries_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServerAppendEntriesResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RaftServerAppendEntriesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServerAppendEntriesResult(%+v)", *p)
}

// Attributes:
//  - Req
type RaftServerRequestVoteArgs struct {
  Req *RequestVoteReq `thrift:"req,1" db:"req" json:"req"`
}

func NewRaftServerRequestVoteArgs() *RaftServerRequestVoteArgs {
  return &RaftServerRequestVoteArgs{}
}

var RaftServerRequestVoteArgs_Req_DEFAULT *RequestVoteReq
func (p *RaftServerRequestVoteArgs) GetReq() *RequestVoteReq {
  if !p.IsSetReq() {
    return RaftServerRequestVoteArgs_Req_DEFAULT
  }
return p.Req
}
func (p *RaftServerRequestVoteArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *RaftServerRequestVoteArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServerRequestVoteArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Req = &RequestVoteReq{}
  if err := p.Req.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *RaftServerRequestVoteArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RequestVote_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServerRequestVoteArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *RaftServerRequestVoteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServerRequestVoteArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RaftServerRequestVoteResult struct {
  Success *RequestVoteResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRaftServerRequestVoteResult() *RaftServerRequestVoteResult {
  return &RaftServerRequestVoteResult{}
}

var RaftServerRequestVoteResult_Success_DEFAULT *RequestVoteResp
func (p *RaftServerRequestVoteResult) GetSuccess() *RequestVoteResp {
  if !p.IsSetSuccess() {
    return RaftServerRequestVoteResult_Success_DEFAULT
  }
return p.Success
}
func (p *RaftServerRequestVoteResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RaftServerRequestVoteResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServerRequestVoteResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RequestVoteResp{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RaftServerRequestVoteResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RequestVote_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServerRequestVoteResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RaftServerRequestVoteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServerRequestVoteResult(%+v)", *p)
}


